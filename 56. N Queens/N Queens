import java.util.*;

public class Solution {
    public static ArrayList<ArrayList<Integer>> solveNQueens(int n) {
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        int[][] arr = new int[n][n];
        memo(0, arr, ans);
        return ans;
    }

    static void memo(int col, int[][] arr, ArrayList<ArrayList<Integer>> ans){
        if(col == arr.length){
            addQueen(arr, ans);
            return;
        }

        for(int row=0; row<arr.length; row++){
            if(placeQueen(row, col, arr)){
                arr[row][col] = 1;
                memo(col+1, arr, ans);
                arr[row][col] = 0;
            }
        }
    }

    static boolean placeQueen(int row, int col, int[][] arr){
        int r = row, c = col;
        while(r >= 0 && c >= 0){
            if(arr[r][c] == 1)    return false;
            r--;
            c--;
        }

        int k = col;
        while(k >= 0){
            if(arr[row][k] == 1)   return false;
            k--;
        }

        int i = row, j = col;
        while(i < arr.length && j >= 0){
            if(arr[i][j] == 1)    return false;
            i++;
            j--;
        }

        return true;
    }

    static void addQueen(int[][] arr, ArrayList<ArrayList<Integer>> ans){
        ArrayList<Integer> temp = new ArrayList<>();
        for(int i=0; i<arr.length; i++){
            for(int j=0; j<arr.length; j++)
                temp.add(arr[i][j]);
        }
        ans.add(temp);
    }
}
