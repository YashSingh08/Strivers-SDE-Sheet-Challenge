import java.util.* ;
import java.io.*; 
public class Solution {
    public static int[] maxMinWindow(int[] a, int n) {
        // Write your code here
        int[] left=new int[n];
        int[] right=new int[n];   
        int[] ans = new int[n]; 
        for(int i = 0;i<n;i++){
            ans[i] = Integer.MIN_VALUE;
        }
        Stack<Integer> st=new Stack<>();
        left[0] = -1;
        st.push(0);
        for(int i=1;i<n;i++) {
            while(!st.empty() && a[st.peek()]>=a[i]) {
                st.pop();
            }
            if(st.empty()) {
                left[i] = -1;
            }
            else{
                left[i] = st.peek();
            }
            st.push(i);
        }
        while(!st.empty()) {
            st.pop();
        }
        right[n-1]=n;
        st.push(n-1);
        for(int i=n-2;i>=0;i--) {
            while(!st.empty() && a[st.peek()]>=a[i]) {
                st.pop();
            }
            if(st.empty()) {
                right[i] = n;
            }
            else{
                right[i] = st.peek();
            }
            st.push(i);
        }
        for(int i=0;i<n;i++) {
            int winLen=right[i]-left[i]-1;
            ans[winLen-1]=Math.max(ans[winLen-1], a[i]);
        }
        for(int i=n-2;i>=0;i--) {
            ans[i]=Math.max(ans[i], ans[i+1]);
        }
        return ans;
    }
}

