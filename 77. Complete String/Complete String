import java.util.* ;
import java.io.*; 

class Solution {
  static class Node {
    Node[] children = new Node[26];
    boolean endOfWord;
    public Node() {
      for (int i = 0; i < 26; i++) {
        children[i] = null;
      }
    }
  }
  public static Node root = new Node();
  public static void insert(String word) { 
        int level = 0;
        int n = word.length();
        int index = 0;
        Node curr = root;
        for (; level < n; level++) {
            index = word.charAt(level) - 'a';
            if (curr.children[index] == null) {
                curr.children[index] = new Node();
            }
            curr = curr.children[index];
        }
        curr.endOfWord = true;
    }
    public static boolean allPrefixCheck(String str) {
        StringBuilder temp = new StringBuilder("");
        for (int i = 0; i < str.length(); i++) {
            temp.append(str.charAt(i));
            if (search(temp) == false) {
                return false;
            }
        }
        return true;
    }
    public static String allPrefix(String[] arr) {
        String str = "";
        for (int i = 0; i < arr.length; i++) {
            if (allPrefixCheck(arr[i].substring(0, arr[i].length() - 1))) {
                if (str.length() == arr[i].length()) {
                    if (str.compareTo(arr[i]) > 0) {
                        str = arr[i];
                    }
                } else {
                    if (arr[i].length() > str.length()) {
                        str = arr[i];
                    }
                }
            }
        }
        if (str.equals("")) {
            return "None";
        }
        return str;
    }
    public static boolean search(StringBuilder key) { 
        int level = 0;
        int n = key.length();
        int index = 0;
        Node curr = root;
        for (; level < n; level++) {
            index = key.charAt(level) - 'a';
            if (curr.children[index] == null) {
                return false;
            }
            curr = curr.children[index];
        }
        return curr.endOfWord == true;
    }
  public static String completeString(int n, String[] a) {
    // Write your code here.
    root=new Node();
     for (String word : a) {
            insert(word);
        }
        return allPrefix(a);
  }
}
