public class Solution {
	public static int subarraysXor(ArrayList<Integer> arr, int k) {
		// Write your code here.
		// brute force
		// int n = arr.size();
        // int count = 0;

        // for (int i = 0; i < n; i++) {
        //     for (int j = i; j < n; j++) {
        //         int xor = 0;
        //         for (int K = i; K <= j; K++) {
        //             xor = xor ^ arr.get(K);
        //         }
        //         if (xor == k) count++;
        //     }
        // }
        // return count;

		// better approach
		// int n = arr.size();
        // int count = 0;
        // for (int i = 0; i < n; i++) {
		// 	int xor = 0;
        //     for (int j = i; j < n; j++) {
		// 		xor = xor ^ arr.get(j);
        //         if (xor == k) count++;
        //     }
        // }
        // return count;


		// optimal approach
		int n = arr.size();
        int xor = 0;
        Map<Integer, Integer> map = new HashMap<>();
        map.put(xor, 1);
        int count = 0;

        for (int i = 0; i < n; i++) {
            xor = xor ^ arr.get(i);

            int x = xor ^ k;
            if (map.containsKey(x)) {
                count += map.get(x);
            }

            if (map.containsKey(xor)) {
                map.put(xor, map.get(xor) + 1);
            } else {
                map.put(xor, 1);
            }
        }
        return count;
	}
}
