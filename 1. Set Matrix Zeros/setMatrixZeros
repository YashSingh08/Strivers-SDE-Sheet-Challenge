// Approach 1: using brute force: time complexity => O((M X N) + (M + N) + (M X N))
        // int row = matrix.length;
        // int col = matrix[0].length;
        // for(int i=0; i<row; i++) {
        //     for(int j=0; j<col; j++) {
        //         if(matrix[i][j] == 0) {
        //             int index = i-1;
        //             while(index >= 0) {
        //                 if(matrix[index][j] != 0) {
        //                     matrix[index][j] = -1;
        //                 }
        //                 index--;
        //             }
        //             index = i+1;
        //             while(index < row) {
        //                 if(matrix[index][j] != 0) {
        //                     matrix[index][j] = -1;
        //                 }
        //                 index++;
        //             }
        //             index = j-1;
        //             while(index >= 0) {
        //                 if(matrix[i][index] != 0) {
        //                     matrix[i][index] = -1;
        //                 }
        //                 index--;
        //             }
        //             index = j+1;
        //             while(index < col) {
        //                 if(matrix[i][index] != 0) {
        //                     matrix[i][index] = -1;
        //                 }
        //                 index++;
        //             }
        //         }
        //     }
        // }
        // for(int i=0; i<row; i++) {
        //     for(int j=0; j<col; j++) {
        //         if(matrix[i][j] <= 0) {
        //             matrix[i][j] = 0;
        //         }
        //     }
        // }

        // Approach 2: Better solution: time Complexity => O(2 M X N), space Complexity => O(M+N)
        // int row = matrix.length;
        // int col = matrix[0].length;
        // int tempRow[] = new int[row];
        // int tempCol[] = new int[col];
        // for(int i=0; i<row; i++) {
        //     for(int j=0; j<col; j++) {
        //         if(matrix[i][j] == 0) {
        //             tempRow[i] = 1;
        //             tempCol[j] = 1;
        //         }
        //     }
        // }
        // for(int i=0; i<row; i++) {
        //     for(int j=0; j<col; j++) {
        //         if(tempRow[i] == 1 || tempCol[j] == 1) {
        //             matrix[i][j] = 0;
        //         }
        //     }
        // }

        // Approach 3: optimum solution: time complexity => O(2 N X M), space complexity => O(1)
        int row = matrix.length;
        int col = matrix[0].length;
        int col0 = 1;
        for(int i=0; i<row; i++) {
            for(int j=0; j<col; j++) {
                if(matrix[i][j] == 0) {
                    matrix[i][0] = 0;
                    if(j != 0){
                        matrix[0][j] = 0;
                    }
                    else{
                        col0 = 0;
                    }
                }
            }
        }
        for(int i=1; i<row; i++) {
            for(int j=1; j<col; j++) {
                if(matrix[i][j] != 0) {
                    if(matrix[i][0] == 0 || matrix[0][j] == 0) {
                        matrix[i][j] = 0;
                    }
                }
            }
        }
        if(matrix[0][0] == 0) {
            for(int j=0; j<col; j++) {
                matrix[0][j] = 0; 
            }
        }
        if(col0 == 0) {
            for(int i=0; i<row; i++) {
                matrix[i][0] = 0;
            }
        }
